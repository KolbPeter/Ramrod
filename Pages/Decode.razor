@page "/Decode"

<PageTitle>Ramcor</PageTitle>

@using Ramcor.Data
@using System.Text.RegularExpressions
@using Blazored.LocalStorage
@using Ramcor.Data.Models
@using Ramcor.Data.Validators
@inject RamcorService RamcorService
@inject ILocalStorageService LocalStorage

<div class="left">

    <h1>Ramcor dekódoló</h1>

    <CodeComponent Code="@RamcorService.Code"></CodeComponent>
    <TextInputComponent @bind-InputString="NewEncodedMessage" IsEnabled="@true" LabelText="Közlemény:" /><br />
    <br />
    <label class="label-information">Dekódolt üzenet:</label><label>@NewMessage</label><br />
    <label class="label-information">Dekódolt pozíció:</label><label>@NewPosition</label><br /><br />
    @if (PreviousCodedMessage != null)
    {
        <PreviousMessageComponent Message=@PreviousCodedMessage Text="Dekódolt üzenet"></PreviousMessageComponent>
    }
</div>

@code {
    private const string CodedMessageStorage = "CodedMessage";

    private string? _newEncodedMessage;
    public string? NewEncodedMessage
    {
        get => _newEncodedMessage;
        set => OnNewMessage(value);
    }

    private string? NewMessage { get; set; }
    private string? NewPosition { get; set; }
    private Message? PreviousCodedMessage { get; set; }

    private void OnNewMessage(string? codedMessage)
    {
        if (string.IsNullOrEmpty(codedMessage) || !Regex.IsMatch(codedMessage, @"^[a-zA-Z]+$"))
        {
            return;
        }

        NewMessage = RamcorService.Decode(codedMessage).Result;
        NewPosition = RamcorService.DecodeAsPosition(codedMessage).Result;
        _newEncodedMessage = codedMessage;

        PreviousCodedMessage = new Message
            {
                Codeword = RamcorService.Code.CodeWord,
                Text = codedMessage,
                ProcessedText = NewPosition
            };
        LocalStorage.SetItemAsync(CodedMessageStorage, PreviousCodedMessage);

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        PreviousCodedMessage = await LocalStorage.GetItemAsync<Message>(CodedMessageStorage);
        await base.OnInitializedAsync();
    }
}
