@using Ramrod.Data
@using Ramrod.Data.Models
@using Blazored.LocalStorage
@using Ramrod.Shared.Forms
@using Ramrod.Shared.Components
@inject RamrodService RamrodService
@inject ILocalStorageService LocalStorage

<fieldset>
    <legend>Kód</legend>
    <EditForm Model="@RamrodCode">
        <CodeForm @bind-Value="@RamrodCode" TValue="@RamrodCode"/>
    </EditForm>
    <CodeComponent Code="@RamrodService.Code"></CodeComponent>
</fieldset>


@code {
        private const string CodeWordStorage = "CodeWord";

    private RamrodCode RamrodCode
    {
        get => new() { CodeWord = RamrodService.Code.CodeWord };
        set => OnCodeChange(value);
    }

    private void OnCodeChange(RamrodCode newCode)
    {
        RamrodService.Code = newCode;
        LocalStorage.SetItemAsync(CodeWordStorage, newCode.CodeWord);
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        var previousCodeWord = await LocalStorage.GetItemAsync<string>(CodeWordStorage);
        OnCodeChange(new RamrodCode { CodeWord = previousCodeWord ?? string.Empty });

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var previousCodeWord = await LocalStorage.GetItemAsync<string>(CodeWordStorage);
        OnCodeChange(new RamrodCode { CodeWord = previousCodeWord ?? string.Empty });

        await base.OnInitializedAsync();
    }

}